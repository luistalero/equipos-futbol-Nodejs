tags:
  - name: Usuarios
    description: Gestión de usuarios del sistema.

paths:
  /users:
    post:
      summary: Crea un nuevo usuario.
      tags: [Usuarios]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: Nombre de usuario único.
                  example: jdoe
                email:
                  type: string
                  format: email
                  description: Email único del usuario.
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  description: Contraseña del usuario.
                  example: password123
                photo_url:
                  type: string
                  description: URL de la foto de perfil del usuario.
                  example: https://example.com/photos/jdoe.jpg
                role:
                  type: string
                  enum: [admin, user]
                  description: Rol del usuario.
                  example: user
      responses:
        201:
          description: Usuario creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario creado exitosamente.
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Datos de entrada no válidos.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: El nombre de usuario o email ya existe.
        500:
          description: Error interno del servidor.
    get:
      summary: Obtiene todos los usuarios.
      tags: [Usuarios]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          description: Error interno del servidor.

  /users/{id}:
    get:
      summary: Obtiene un usuario por ID.
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del usuario a buscar.
      responses:
        200:
          description: Información del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Usuario no encontrado.
        500:
          description: Error interno del servidor.
    put:
      summary: Actualiza un usuario existente.
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del usuario a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: jdoe_updated
                email:
                  type: string
                  format: email
                  example: jdoe.updated@example.com
                password:
                  type: string
                  format: password
                  example: new_password123
                photo_url:
                  type: string
                  example: https://example.com/photos/jdoe_new.jpg
                role:
                  type: string
                  enum: [admin, user]
                  example: admin
      responses:
        200:
          description: Usuario actualizado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario actualizado exitosamente.
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Datos de entrada no válidos.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Usuario no encontrado.
        409:
          description: El nombre de usuario o email ya existe.
        500:
          description: Error interno del servidor.
    delete:
      summary: Elimina un usuario.
      tags: [Usuarios]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del usuario a eliminar.
      responses:
        200:
          description: Usuario eliminado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario eliminado exitosamente.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Usuario no encontrado.
        500:
          description: Error interno del servidor.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        username:
          type: string
          example: jdoe
        email:
          type: string
          example: jdoe@example.com
        photo_url:
          type: string
          nullable: true
          example: https://example.com/photo.jpg
        role:
          type: string
          enum: [admin, user]
          example: user
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-08-04T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-08-04T12:00:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Token de acceso no proporcionado o inválido.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    ForbiddenError:
      description: El usuario no tiene permisos para realizar esta acción.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Forbidden
